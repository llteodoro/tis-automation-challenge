
trigger:
- main

pool:
  vmImage: ubuntu-latest

parameters: 
  - name: workingDirectory 
    type: string 
    default: "$(Build.SourcesDirectory)/ansible"
steps:

- script:


- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'init'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'

- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'plan'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'

- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'apply'
    commandOptions: '-auto-approve'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'
    
- task: DownloadSecureFile@1
  inputs:
    secureFile: 'challenge-key.pem'


-  task: UsePythonVersion@0
   inputs:
    versionSpec: '3.x' 
    addToPath: true 
    architecture: 'x64'

#- task: CmdLine@2
#  displayName: Install Dependencies 
#  inputs:
#    workingDirectory: '${{ parameters.workingDirectory }}'
#    script: |
#      python3 -m venv .venv && source .venv/bin/activate
#      python3 -m pip install --upgrade pip
#      python3 -m pip install "ansible"
#      python3 -m pip install "botocore"
#      python3 -m pip install "boto3"

- task: Bash@3
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    targetType: 'inline'
    script: |
            python3 -m venv .venv && source .venv/bin/activate
            python3 -m pip install --upgrade pip
            python3 -m pip install "ansible"
            python3 -m pip install "botocore"
            python3 -m pip install "boto3"
- task: Bash@3
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    targetType: 'inline'
    script: |
     echo $AWS_PROFILE
     export AWS_ACCES_KEY_ID=$(AWS_ACCES_KEY_ID)
     export AWS_SECRET_ACCESS_KEY=$(AWS_ACCES_KEY_SECRET)
     export ANSIBLE_HOST_KEY_CHECKING="False"
      #export SSH_KEY=$(cat /home/vsts/work/_temp/challenge_key.pem) > /dev/null
      #eval $(ssh-agent -s)
      #ssh-add /home/vsts/work/_temp/challenge_key.pem
      #echo "$SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
     ANSIBLE_HOST_KEY_CHECKING=False
     python3 -m venv .venv && source .venv/bin/activate
     ansible-playbook -i inventory_aws_ec2.yml playbook-linux.yml -u ubuntu --private-key challenge-key.pem
- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'destroy'
    commandOptions: '-auto-approve'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'
    
#- task: CmdLine@3
#  displayName: Run Ansible Playbook Windows
#  inputs:
#    script: |
#    python3 -m venv venv
#    source venv/bin/activate
#    ansible-playbook -i inventory_aws_ec2.yml playbook-linux.yml -u ubuntu -private-key challenge-key.pem