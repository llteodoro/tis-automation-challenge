
trigger:
- none

pool:
  vmImage: ubuntu-latest

parameters: 
  - name: workingDirectory 
    type: string 
    default: "$(Build.SourcesDirectory)/ansible"
steps:

- script:


- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'init'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'

- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'plan'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'

- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'apply'
    commandOptions: '-auto-approve'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'
    
- task: DownloadSecureFile@1
  name: challengekey
  displayName: 'Download SSH-KEY'
  inputs:
    secureFile: 'challengekey'
- script: |
    sudo chown root:root $(challengekey.secureFilePath)
    sudo chmod a+r $(challengekey.secureFilePath)
    sudo ln -s -t /etc/ssl/certs/ $(challengekey.secureFilePath)
    export SSH_KEY=$(cat $(challengekey.secureFilePath) ) > /dev/null
    eval $(ssh-agent -s)
    ssh-add $(challengekey.secureFilePath)
    echo "$SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null

-  task: UsePythonVersion@0
   inputs:
    versionSpec: '3.x' 
    addToPath: true 
    architecture: 'x64'

- task: Bash@3
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    targetType: 'inline'
    script: |
            python3 -m venv .venv && source .venv/bin/activate
            python3 -m pip install --upgrade pip
            python3 -m pip install "ansible"
            python3 -m pip install "botocore"
            python3 -m pip install "boto3"

- task: Bash@3
  inputs:
    workingDirectory: '${{ parameters.workingDirectory }}'
    targetType: 'inline'
    script: |
     export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) 
     export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY) 
     ANSIBLE_HOST_KEY_CHECKING=False 
     python3 -m venv .venv && source .venv/bin/activate 
     ansible-inventory -i inventory.aws_ec2.yml --graph 
     ansible-playbook -i inventory.aws_ec2.yml playbook-linux.yml -u ubuntu --private-key $(challengekey.secureFilePath)
- task: TerraformTaskV3@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aws/'
    provider: 'aws'
    command: 'destroy'
    commandOptions: '-auto-approve'
    environmentServiceNameAWS: 'llteodoro-tis-automation-challenge'
    backendServiceAWS: 'llteodoro-tis-automation-challenge'
    backendAWSBucketName: 'tis-automation-challenge'
    backendAWSKey: 'tf-state/terraform.tfstate'
    
#- task: CmdLine@3
#  displayName: Run Ansible Playbook Windows
#  inputs:
#    script: |
#    python3 -m venv venv
#    source venv/bin/activate
#    ansible-playbook -i inventory_aws_ec2.yml playbook-linux.yml -u ubuntu -private-key challenge-key.pem